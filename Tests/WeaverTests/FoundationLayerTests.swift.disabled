import Testing
import Foundation
@testable import Weaver

// MARK: - Foundation Layer 완전 테스트

@Suite("Foundation Layer - 핵심 프로토콜 및 에러 시스템")
struct FoundationLayerTests {
    
    // MARK: - DependencyKey 프로토콜 테스트
    
    @Test("DependencyKey 기본값 제공 검증")
    func testDependencyKeyDefaultValue() async throws {
        // 기본값이 올바르게 제공되는지 검증
        let defaultService = ServiceKey.defaultValue
        #expect(defaultService.isDefaultValue == true)
        
        let defaultLogger = LoggerKey.defaultValue
        #expect(defaultLogger is NoOpLogger)
    }
    
    @Test("DependencyKey Sendable 준수 검증")
    func testDependencyKeySendableCompliance() async throws {
        // 컴파일 타임에 Sendable 준수가 보장되므로 런타임 검증
        let key = AnyDependencyKey(ServiceKey.self)
        #expect(key.description.contains("ServiceKey"))
    }
    
    // MARK: - WeaverError 계층 구조 테스트
    
    @Test("WeaverError 모든 케이스 생성 및 메시지 검증")
    func testWeaverErrorCases() async throws {
        let errors: [WeaverError] = [
            .containerNotFound,
            .containerNotReady(currentState: .idle),
            .containerFailed(underlying: TestError.factoryFailed),
            .resolutionFailed(.keyNotFound(keyName: "TestKey")),
            .shutdownInProgress,
            .initializationTimeout(timeoutDuration: 5.0),
            .dependencyResolutionFailed(keyName: "TestKey", currentState: .idle, underlying: TestError.factoryFailed),
            .criticalDependencyFailed(keyName: "LoggerKey", underlying: TestError.factoryFailed),
            .memoryPressureDetected(availableMemory: 50),
            .appLifecycleEventFailed(event: "didEnterBackground", keyName: "NetworkService", underlying: TestError.factoryFailed)
        ]
        
        for error in errors {
            let description = error.errorDescription
            #expect(description != nil)
            #expect(!description!.isEmpty)
            
            // 디버그 설명도 검증
            let debugDescription = error.debugDescription
            #expect(!debugDescription.isEmpty)
        }
    }
    
    @Test("ResolutionError 계층 구조 검증")
    func testResolutionErrorHierarchy() async throws {
        let resolutionErrors: [ResolutionError] = [
            .circularDependency(path: "A -> B -> A"),
            .factoryFailed(keyName: "ServiceKey", underlying: TestError.factoryFailed),
            .typeMismatch(expected: "TestService", actual: "AnotherService", keyName: "ServiceKey"),
            .keyNotFound(keyName: "UnknownKey"),
            .weakObjectDeallocated(keyName: "WeakServiceKey")
        ]
        
        for error in resolutionErrors {
            let weaverError = WeaverError.resolutionFailed(error)
            let description = weaverError.errorDescription
            #expect(description != nil)
            #expect(description!.contains("의존성 해결에 실패"))
        }
    }
    
    @Test("에러 Equatable 구현 정확성 검증")
    func testErrorEquatableImplementation() async throws {
        let error1 = WeaverError.containerNotFound
        let error2 = WeaverError.containerNotFound
        let error3 = WeaverError.shutdownInProgress
        
        #expect(error1 == error2)
        #expect(error1 != error3)
        
        let resolutionError1 = ResolutionError.keyNotFound(keyName: "TestKey")
        let resolutionError2 = ResolutionError.keyNotFound(keyName: "TestKey")
        let resolutionError3 = ResolutionError.keyNotFound(keyName: "OtherKey")
        
        #expect(resolutionError1 == resolutionError2)
        #expect(resolutionError1 != resolutionError3)
    }
    
    // MARK: - DefaultValueGuidelines 테스트
    
    @Test("환경별 기본값 분기 검증")
    func testEnvironmentBasedDefaults() async throws {
        // Preview 환경 시뮬레이션은 어려우므로 로직 검증
        let productionValue = "production"
        let previewValue = "preview"
        
        // 실제 환경에서는 production 값이 반환되어야 함
        let result = DefaultValueGuidelines.safeDefault(
            production: productionValue,
            preview: previewValue
        )
        
        // Preview가 아닌 환경에서는 production 값 반환
        #expect(result == productionValue)
    }
    
    @Test("디버그/릴리즈 빌드 분기 검증")
    func testDebugReleaseDefaults() async throws {
        let debugValue = "debug"
        let releaseValue = "release"
        
        let result = DefaultValueGuidelines.debugDefault(
            debug: debugValue,
            release: releaseValue
        )
        
        #if DEBUG
        #expect(result == debugValue)
        #else
        #expect(result == releaseValue)
        #endif
    }
    
    @Test("Null Object 패턴 구현체 동작 검증")
    func testNullObjectPatterns() async throws {
        // NoOpLogger 검증
        let logger = NoOpLogger()
        // 크래시 없이 호출 가능해야 함
        logger.debug("test")
        logger.info("test")
        logger.warning("test")
        logger.error("test")
        
        // NoOpAnalytics 검증
        let analytics = NoOpAnalytics()
        analytics.track(event: "test")
        analytics.setUserProperty(key: "test", value: "test")
        analytics.setUserId("test")
        
        // OfflineNetworkService 검증
        let networkService = OfflineNetworkService()
        #expect(networkService.isOnline() == false)
        
        do {
            let _: String = try await networkService.fetch(url: URL(string: "https://example.com")!)
            #expect(Bool(false), "오프라인 서비스는 항상 실패해야 함")
        } catch {
            // 예상된 에러
            #expect(error is NetworkError)
        }
    }
    
    // MARK: - LifecycleState 테스트
    
    @Test("LifecycleState 상태 전환 및 Equatable 검증")
    func testLifecycleStateTransitions() async throws {
        let states: [LifecycleState] = [
            .idle,
            .configuring,
            .warmingUp(progress: 0.5),
            .warmingUp(progress: 1.0),
            .failed(TestError.factoryFailed),
            .shutdown
        ]
        
        // 각 상태가 자기 자신과 같은지 검증
        for state in states {
            #expect(state == state)
        }
        
        // 다른 상태들은 서로 다른지 검증
        #expect(LifecycleState.idle != LifecycleState.configuring)
        #expect(LifecycleState.warmingUp(progress: 0.5) != LifecycleState.warmingUp(progress: 0.7))
        #expect(LifecycleState.warmingUp(progress: 0.5) == LifecycleState.warmingUp(progress: 0.5))
    }
}

// MARK: - 테스트용 확장

extension FoundationLayerTests {
    
    // 테스트용 DependencyKey 정의
    struct ServiceKey: DependencyKey {
        typealias Value = Service
        static var defaultValue: Service { NullService(isDefaultValue: true) }
    }
    
    struct LoggerKey: DependencyKey {
        typealias Value = NoOpLogger
        static var defaultValue: NoOpLogger { NoOpLogger() }
    }
    
    // 테스트용 NetworkError
    enum NetworkError: Error {
        case offline
    }
}