import Testing
import Foundation
@testable import Weaver

#if canImport(SwiftUI)
import SwiftUI

// MARK: - Application Layer 테스트

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@Suite("Application Layer - SwiftUI 통합 및 성능 모니터링")
struct ApplicationLayerTests {
    
    // MARK: - SwiftUI 통합 테스트
    
    @Test("WeaverViewModifier 상태 관리")
    func testWeaverViewModifierStateManagement() async throws {
        let modules = [TestModule()]
        let modifier = WeaverViewModifier(modules: modules, setAsGlobal: false)
        
        // ViewModifier는 실제 SwiftUI 환경에서만 완전히 테스트 가능
        // 여기서는 초기화가 성공하는지만 확인
        #expect(modules.count == 1)
    }
    
    @Test("Preview 환경 호환성")
    func testPreviewEnvironmentCompatibility() async throws {
        // Preview 환경에서는 기본값이 반환되어야 함
        let previewModule = PreviewWeaverContainer.previewModule(
            ServiceKey.self,
            mockValue: TestService(isDefaultValue: false)
        )
        
        // 모듈이 올바르게 생성되는지 확인
        let builder = WeaverContainer.builder()
        await previewModule.configure(builder)
        
        let container = await builder.build()
        let service = try await container.resolve(ServiceKey.self)
        #expect(service.isDefaultValue == false)
        
        await container.shutdown()
    }
    
    // MARK: - 성능 모니터링 테스트
    
    @Test("성능 모니터 메트릭 수집")
    func testPerformanceMonitorMetricsCollection() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        // 성능 측정 실행
        let result = try await monitor.measureResolution(keyName: "TestService") {
            // 시뮬레이션된 작업
            try await Task.sleep(nanoseconds: 10_000_000) // 10ms
            return TestService()
        }
        
        #expect(result.isDefaultValue == false)
        
        // 성능 보고서 생성
        let report = await monitor.generatePerformanceReport()
        #expect(report.totalResolutions == 1)
        #expect(report.averageResolutionTime > 0)
        
        print("📊 성능 보고서: \(report)")
    }
    
    @Test("느린 해결 감지")
    func testSlowResolutionDetection() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        // 의도적으로 느린 작업
        _ = try await monitor.measureResolution(keyName: "SlowService") {
            try await Task.sleep(nanoseconds: 150_000_000) // 150ms (임계값 100ms 초과)
            return TestService()
        }
        
        let report = await monitor.generatePerformanceReport()
        #expect(report.slowResolutions.count == 1)
        #expect(report.slowResolutions.first?.keyName == "SlowService")
        #expect(report.slowResolutions.first?.duration ?? 0 > 0.1)
    }
    
    @Test("메모리 사용량 추적")
    func testMemoryUsageTracking() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        // 메모리 사용량 기록
        await monitor.recordMemoryUsage()
        
        // 메모리 사용량을 증가시키는 작업
        var largeArray: [Data] = []
        for _ in 0..<100 {
            largeArray.append(Data(count: 1024 * 1024)) // 1MB씩
        }
        
        await monitor.recordMemoryUsage()
        
        // 메모리 해제
        largeArray.removeAll()
        
        let report = await monitor.generatePerformanceReport()
        #expect(report.peakMemoryUsage > report.averageMemoryUsage)
        
        print("💾 메모리 사용량 - 평균: \(report.averageMemoryUsage / (1024*1024))MB, 최대: \(report.peakMemoryUsage / (1024*1024))MB")
    }
    
    @Test("성능 모니터 비활성화 상태")
    func testPerformanceMonitorDisabled() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: false)
        
        // 비활성화된 상태에서 측정
        let result = await monitor.measureResolution(keyName: "TestService") {
            return TestService()
        }
        
        #expect(result.isDefaultValue == false)
        
        // 보고서는 빈 상태여야 함
        let report = await monitor.generatePerformanceReport()
        #expect(report.totalResolutions == 0)
        #expect(report.averageResolutionTime == 0)
    }
    
    @Test("성능 데이터 초기화")
    func testPerformanceDataReset() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        // 데이터 생성
        await monitor.measureResolution(keyName: "TestService") {
            return TestService()
        }
        await monitor.recordMemoryUsage()
        
        // 초기 보고서 확인
        let initialReport = await monitor.generatePerformanceReport()
        #expect(initialReport.totalResolutions == 1)
        
        // 데이터 초기화
        await monitor.reset()
        
        // 초기화 후 보고서 확인
        let resetReport = await monitor.generatePerformanceReport()
        #expect(resetReport.totalResolutions == 0)
        #expect(resetReport.averageResolutionTime == 0)
    }
    
    // MARK: - 통합 성능 테스트
    
    @Test("실제 DI 컨테이너와 성능 모니터 통합")
    func testDIContainerPerformanceIntegration() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        let container = await WeaverContainer.builder()
            .register(ServiceKey.self) { _ in
                // 시뮬레이션된 초기화 시간
                try await Task.sleep(nanoseconds: 5_000_000) // 5ms
                return TestService()
            }
            .register(AnotherServiceKey.self, scope: .container) { _ in
                return AnotherService()
            }
            .build()
        
        // 성능 측정과 함께 의존성 해결
        let service1 = await monitor.measureResolution(keyName: "ServiceKey") {
            try await container.resolve(ServiceKey.self)
        }
        
        let service2 = await monitor.measureResolution(keyName: "ServiceKey") {
            try await container.resolve(ServiceKey.self)
        }
        
        let anotherService = await monitor.measureResolution(keyName: "AnotherServiceKey") {
            try await container.resolve(AnotherServiceKey.self)
        }
        
        #expect(service1.isDefaultValue == false)
        #expect(service2.isDefaultValue == false)
        #expect(anotherService is AnotherService)
        
        // 성능 보고서 분석
        let report = await monitor.generatePerformanceReport()
        #expect(report.totalResolutions == 3)
        
        print("🚀 DI 성능 보고서:")
        print(report.description)
        
        await container.shutdown()
    }
    
    // MARK: - 메모리 압박 시나리오 테스트
    
    @Test("메모리 압박 상황에서 성능 모니터링")
    func testPerformanceMonitoringUnderMemoryPressure() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        let container = await WeaverContainer.builder()
            .registerWeak(WeakServiceKey.self) { _ in WeakService() }
            .build()
        
        // 대량 인스턴스 생성으로 메모리 압박 유도
        var instances: [WeakService] = []
        for i in 0..<1000 {
            let instance = await monitor.measureResolution(keyName: "WeakService\(i)") {
                try await container.resolve(WeakServiceKey.self)
            }
            instances.append(instance)
            
            // 주기적으로 메모리 사용량 기록
            if i % 100 == 0 {
                await monitor.recordMemoryUsage()
            }
        }
        
        // 메모리 해제
        instances.removeAll()
        await container.performMemoryCleanup(forced: true)
        await monitor.recordMemoryUsage()
        
        // 성능 분석
        let report = await monitor.generatePerformanceReport()
        #expect(report.totalResolutions == 1000)
        
        let memoryIncreaseMB = (report.peakMemoryUsage - report.averageMemoryUsage) / (1024 * 1024)
        print("📈 메모리 증가량: \(memoryIncreaseMB)MB")
        
        await container.shutdown()
    }
    
    // MARK: - 벤치마크 테스트
    
    @Test("의존성 해결 성능 벤치마크")
    func benchmarkDependencyResolutionPerformance() async throws {
        let monitor = WeaverPerformanceMonitor(enabled: true)
        
        let container = await WeaverContainer.builder()
            .register(ServiceKey.self, scope: .container) { _ in TestService() }
            .build()
        
        let iterations = 1000
        let startTime = CFAbsoluteTimeGetCurrent()
        
        for i in 0..<iterations {
            _ = await monitor.measureResolution(keyName: "Benchmark\(i)") {
                try await container.resolve(ServiceKey.self)
            }
        }
        
        let totalDuration = CFAbsoluteTimeGetCurrent() - startTime
        let averageTime = totalDuration / Double(iterations) * 1000 // ms
        
        let report = await monitor.generatePerformanceReport()
        
        print("⚡ 벤치마크 결과:")
        print("- 총 해결 횟수: \(iterations)")
        print("- 총 소요 시간: \(String(format: "%.3f", totalDuration))초")
        print("- 평균 해결 시간: \(String(format: "%.3f", averageTime))ms")
        print("- 모니터 평균 시간: \(String(format: "%.3f", report.averageResolutionTime * 1000))ms")
        
        #expect(averageTime < 1.0, "평균 해결 시간이 1ms를 초과합니다: \(averageTime)ms")
        
        await container.shutdown()
    }
}

// MARK: - 테스트 지원 타입들

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension ApplicationLayerTests {
    
    // DependencyKey 정의들
    struct ServiceKey: DependencyKey {
        typealias Value = Service
        static var defaultValue: Service { NullService(isDefaultValue: true) }
    }
    
    struct AnotherServiceKey: DependencyKey {
        typealias Value = AnotherService
        static var defaultValue: AnotherService { AnotherService(isDefaultValue: true) }
    }
    
    struct WeakServiceKey: DependencyKey {
        typealias Value = WeakService
        static var defaultValue: WeakService { WeakService(isDefaultValue: true) }
    }
    
    // 테스트용 모듈
    struct TestModule: Module {
        func configure(_ builder: WeaverBuilder) async {
            await builder.register(ServiceKey.self) { _ in TestService() }
        }
    }
}

#else

// SwiftUI를 사용할 수 없는 환경에서는 빈 테스트 스위트
@Suite("Application Layer - SwiftUI 통합 및 성능 모니터링")
struct ApplicationLayerTests {
    
    @Test("SwiftUI 미지원 환경")
    func testSwiftUINotAvailable() async throws {
        // SwiftUI가 지원되지 않는 환경
        #expect(Bool(true), "SwiftUI가 지원되지 않는 환경입니다")
    }
}

#endif